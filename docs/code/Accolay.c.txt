/* An application of the Square-wave synthetizer and its limiting 1-channel capabilities;
I present to you the first few bars of the solo part of the violin concerto by Accolay
;-)

P.S.: silences still produce a remanant sound (that's softer than a real note) even if
the volume parameter is set to 0. To make repeating notes in a sequence, insert
1-tick long 0-volume notes in-between them.
*/


#include <QuickDraw.h>
#include <Windows.h>
#include <Sound.h>
#include <OSUtils.h>
#define TEMPO 110 /* MUST be declared before including notes.h. This is bpm for quarter notes*/
#define NONOTES 88 /*used to define the Tones buffer size for its Handle */
#include "notes.h"

void main()
{
Ptr myPtr;
Handle myHandle;
SWSynthPtr mySWPtr;
int buffSize;
WindowRecord mywin;
WindowPtr mywinptr;
Rect r;
char tempstr[10];
ConstStr255Param pastr;
float freq;
int i,j,k,timer;



InitGraf(&thePort);
InitWindows();

r=qd.screenBits.bounds;
mywinptr=NewWindow(&mywin,&r,"\p",true,3,(WindowPtr)-1,true,0);
SetPort(mywinptr);

buffSize=5+3*sizeof(short)*NONOTES;

myHandle=NewHandle(buffSize);
HLock(myHandle);
myPtr=*myHandle;
mySWPtr=(SWSynthPtr)myPtr;
mySWPtr->mode=swMode;

k=0;

freq=MakeNote(9,-1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR+EIGHTRIP); 
k++;

freq=MakeNote(0,0);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(4,0);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(9,0);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(0,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH+SIXT);
k++;

freq=MakeNote(11,1);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT);
k++;

/* 1 MEASURE 7*/

freq=MakeNote(8,1);
ASSIGN(mySWPtr->triplets[k],freq,200,HALF);
k++;

freq=MakeNote(9,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR);
k++;

freq=MakeNote(4,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH+SIXT);
k++;

freq=MakeNote(5,2);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT);
k++;

/* 2 MEASURE 11*/

freq=MakeNote(0,0);
ASSIGN(mySWPtr->triplets[k],freq,0,1);
k++;

freq=MakeNote(5,2);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR+EIGH-1);
k++;

freq=MakeNote(4,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH);
k++;

freq=MakeNote(0,0);
ASSIGN(mySWPtr->triplets[k],freq,0,1);
k++;

freq=MakeNote(4,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP-1);
k++;

freq=MakeNote(2,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(0,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(0,0);
ASSIGN(mySWPtr->triplets[k],freq,0,1);
k++;

freq=MakeNote(0,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP-1);
k++;

freq=MakeNote(11,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(9,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

/*3 MEASURE 22*/

freq=MakeNote(9,1);
ASSIGN(mySWPtr->triplets[k],freq,0,1);
k++;

freq=MakeNote(9,1);
ASSIGN(mySWPtr->triplets[k],freq,200,HALF-1);
k++;

freq=MakeNote(8,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR);
k++;

freq=MakeNote(0,0);
ASSIGN(mySWPtr->triplets[k],freq,0,QUAR);
k++;

/*4 MEASURE 26*/

freq=MakeNote(8,-1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR+EIGHTRIP);
k++;

freq=MakeNote(11,-1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(8,-1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(4,0);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(11,0);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(2,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH+SIXT);
k++;

freq=MakeNote(0,2);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT);
k++;

/*5 MEASURE 34 */

freq=MakeNote(10,1);
ASSIGN(mySWPtr->triplets[k],freq,200,HALF);
k++;

freq=MakeNote(11,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR);
k++;

freq=MakeNote(4,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH+SIXT);
k++;

freq=MakeNote(5,2);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT);
k++;

/*6 MEASURE 38*/

freq=MakeNote(0,0);
ASSIGN(mySWPtr->triplets[k],freq,0,1);
k++;

freq=MakeNote(5,2);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR+EIGH-1);
k++;

freq=MakeNote(4,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(0,0);
ASSIGN(mySWPtr->triplets[k],freq,0,1);
k++;

freq=MakeNote(4,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP-1);
k++;

freq=MakeNote(2,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(0,2);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(11,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(10,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

freq=MakeNote(11,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGHTRIP);
k++;

 /* 7 MEASURE 48 */

freq=MakeNote(2,2);
ASSIGN(mySWPtr->triplets[k],freq,200,HALF);
k++;

freq=MakeNote(0,2);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR);
k++;

freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,(EIGH+SIXT)/6);
k++;
freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,(EIGH+SIXT)*5/6);
k++;

freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT/3);
k++;
freq=MakeNote(9,1);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT*2/3);
k++;

/*8 MEASURE 54*/

freq=MakeNote(11,0);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)/6);
k++;
freq=MakeNote(7,1);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)*5/6);
k++;

freq=MakeNote(2,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH/3);
k++;
freq=MakeNote(5,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH*2/3);
k++;

freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR/6);
k++;
freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR*5/6);
k++;

freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,0,1);
k++;

freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,(EIGH+SIXT)/6);
k++;
freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,(EIGH+SIXT)*5/6);
k++;

freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT/3);
k++;
freq=MakeNote(9,1);
ASSIGN(mySWPtr->triplets[k],freq,200,SIXT*2/3);
k++;

/*9 MEASURE 65*/

freq=MakeNote(7,-1);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)/6);
k++;
freq=MakeNote(2,0);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)/6);
k++;
freq=MakeNote(11,0);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)/6);
k++;
freq=MakeNote(7,1);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)/2);
k++;

freq=MakeNote(2,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH/3);
k++;
freq=MakeNote(5,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH*2/3);
k++;

freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR/6);
k++;
freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR*5/6);
k++;

freq=MakeNote(9,0);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR/6);
k++;
freq=MakeNote(5,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR*5/6);
k++;

/* 10 MEASURE 75 */

freq=MakeNote(11,0);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR/6);
k++;
freq=MakeNote(2,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR*5/6);
k++;

freq=MakeNote(8,0);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR/6);
k++;
freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR*5/6);
k++;

freq=MakeNote(9,0);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR/6);
k++;
freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR*5/6);
k++;

freq=MakeNote(5,0);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR/6);
k++;
freq=MakeNote(2,1);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR*5/6);
k++;

/* 11 MEASURE 83 */
 
freq=MakeNote(4,0);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)/6);
k++;
freq=MakeNote(4,1);
ASSIGN(mySWPtr->triplets[k],freq,200,(QUAR+EIGH)*5/6);
k++;
freq=MakeNote(0,1);
ASSIGN(mySWPtr->triplets[k],freq,200,EIGH);
k++;
freq=MakeNote(11,0);
ASSIGN(mySWPtr->triplets[k],freq,200,QUAR);
k++;

freq=MakeNote(11,0);
ASSIGN(mySWPtr->triplets[k],freq,0,QUAR);
k++;
/* 12 MEASURE 88 */


StartSound((Ptr)mySWPtr,buffSize,(SndCompletionProcPtr)nil); /*Played asynchronously*/
timer=TickCount();
while(TickCount()-timer<WHOL*12);  /*Force idleness until 12 measures (which is the
duration of the programmed segment of music) have passed*/
StopSound();
HUnlock(myHandle);
  
while(!Button());
}